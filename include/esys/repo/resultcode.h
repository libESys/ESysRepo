/*!
 * \file esys/repo/resultcode.h
 * \brief
 *
 * \cond
 * __legal_b__
 *
 * Copyright (c) 2022 Michel Gillet
 * Distributed under the wxWindows Library Licence, Version 3.1.
 * (See accompanying file LICENSE_3_1.txt or
 * copy at http://www.wxwidgets.org/about/licence)
 *
 * __legal_e__
 * \endcond
 *
 */

#pragma once

#include "esys/repo/esysrepo_defs.h"

#include <map>
#include <ostream>
#include <string>
#include <vector>

#ifdef _MSC_VER
#define DECLARE_RESULT_CODE(name) static esys::repo::ResultCode name
#define DEFINE_RESULT_CODE(name, ...) ResultCode ResultCode::##name(#name, __VA_ARGS__)
#else
#define DECLARE_RESULT_CODE(name) static esys::repo::ResultCode name
#define DEFINE_RESULT_CODE(name, ...) ResultCode ResultCode:: name(#name, ##__VA_ARGS__)
#endif

//<swig_inc/>

namespace esys::repo
{

class ESYSREPO_API ResultCode
{
public:
    ResultCode(const std::string &name);
    ResultCode(const std::string &name, int id);
    ~ResultCode();

    std::string get_name() const;

    void set_id(int id);
    int get_id() const;

    operator int() const;

    ResultCode &operator=(const ResultCode &other); //<swig_out/>

    bool operator==(const ResultCode &result_code) const;
    bool operator!=(const ResultCode &result_code) const;

    static int s_get_cur_id();
    static std::string s_find_name(int id);
    static bool s_is_id(int id);
    static const std::vector<int> &s_get_ints();

    DECLARE_RESULT_CODE(OK);

    DECLARE_RESULT_CODE(GENERIC_ERROR);
    DECLARE_RESULT_CODE(ERROR_OPENING_FILE);
    DECLARE_RESULT_CODE(PATH_NOT_EXISTING);
    DECLARE_RESULT_CODE(EMPTY_PATH);
    DECLARE_RESULT_CODE(FILE_NOT_EXISTING);
    DECLARE_RESULT_CODE(INTERNAL_ERROR);
    DECLARE_RESULT_CODE(NOT_IMPLEMENTED);
    DECLARE_RESULT_CODE(FOLDER_CREATION_ERROR);
    DECLARE_RESULT_CODE(FAILED_TO_COPY);
    DECLARE_RESULT_CODE(FAILED_TO_REMOVE_ALL);
    DECLARE_RESULT_CODE(RAW_INT_ERROR);
    DECLARE_RESULT_CODE(FOLDER_ALREADY_EXISTS);

    DECLARE_RESULT_CODE(CFGFILE_ERROR_PARSING_FILE);
    DECLARE_RESULT_CODE(CFGFILE_NO_MANIFEST_TYPE);
    DECLARE_RESULT_CODE(CFGFILE_UNKNOWN_MANIFEST_TYPE);
    DECLARE_RESULT_CODE(CFGFILE_NO_MANIFEST_URL);
    DECLARE_RESULT_CODE(CFGFILE_UNKNOWN_MANIFEST_KIND);
    DECLARE_RESULT_CODE(CFGFILE_UNKNOWN_MANIFEST_FORMAT);

    DECLARE_RESULT_CODE(MANIFEST_ERROR_PARSING_FILE);
    DECLARE_RESULT_CODE(MANIFEST_NO_LOCATIONS_DEFINED);
    DECLARE_RESULT_CODE(MANIFEST_UNKNOWN_ELEMENT);
    DECLARE_RESULT_CODE(MANIFEST_UNKNOWN_ATTRIBUTE);
    DECLARE_RESULT_CODE(MANIFEST_INCORRECT_ATTRIBUTE_VALUE);
    DECLARE_RESULT_CODE(MANIFEST_NO_DEFAULT_LOCATION);
    DECLARE_RESULT_CODE(MANIFEST_UNKNOWN_TYPE);
    DECLARE_RESULT_CODE(MANIFEST_UNKNOWN_KIND);
    DECLARE_RESULT_CODE(MANIFEST_LOCATION_WITHOUT_NAME);
    DECLARE_RESULT_CODE(MANIFEST_LOCATION_WITHOUT_ADDRESS);
    DECLARE_RESULT_CODE(MANIFEST_REPOSITORY_WITHOUT_NAME);
    DECLARE_RESULT_CODE(MANIFEST_REPOSITORY_WITHOUT_PATH);
    DECLARE_RESULT_CODE(MANIFEST_GROUP_WITHOUT_NAME);
    DECLARE_RESULT_CODE(MANIFEST_GROUP_REPO_WITHOUT_NAME);
    DECLARE_RESULT_CODE(MANIFEST_GROUP_REPO_WITHOUT_PATH);
    DECLARE_RESULT_CODE(MANIFEST_UNKNOWN_REPO);
    DECLARE_RESULT_CODE(MANIFEST_UNKNOWN_FILE_EXT);
    DECLARE_RESULT_CODE(MANIFEST_FAILED_TO_DETECT);

    DECLARE_RESULT_CODE(GREPO_FOLDER_NO_INCLUDE);

    DECLARE_RESULT_CODE(CMDINIT_NO_URL);
    DECLARE_RESULT_CODE(CMDINIT_FAILED_FETCH_UNKNOWN_MANIFEST);

    DECLARE_RESULT_CODE(GIT_GENERIC_ERROR);
    DECLARE_RESULT_CODE(GIT_UNKNOWN_PROTOCOL);
    DECLARE_RESULT_CODE(GIT_RAW_INT_ERROR);
    DECLARE_RESULT_CODE(GIT_ERROR_OPENING_REPO);

    DECLARE_RESULT_CODE(CMD_INCORRECT_PARAMETERS_IN_CONTEXT);
    DECLARE_RESULT_CODE(CMD_INCORRECT_PARAMETERS_COMBINATION);
    DECLARE_RESULT_CODE(CMD_MISSING_PARAMETERS);
    DECLARE_RESULT_CODE(CMD_GENERIC_RAW_ERROR);

protected:
    static int s_cur_id;
    static std::map<int, std::string> s_map;
    static std::vector<int> s_ints;

    int m_id = -1;
};

enum class ResultCodei
{
    SUCCESS = 0,
    OK = 0,
    GENERIC_ERROR = -1,
    ERROR_OPENING_FILE = -2,
    PATH_NOT_EXISTING = -3,
    EMPTY_PATH = -4,
    FILE_NOT_EXISTING = -5,
    INTERNAL_ERROR = -6,
    NOT_IMPLEMENTED = -7,
    FOLDER_CREATION_ERROR = -8,
    FAILED_TO_COPY = -9,
    FAILED_TO_REMOVE_ALL = -10,
    RAW_INT_ERROR = -11,
    FOLDER_ALREADY_EXISTS = -12,

    CFGFILE_ERROR_PARSING_FILE = -100,
    CFGFILE_NO_MANIFEST_TYPE = -101,
    CFGFILE_UNKNOWN_MANIFEST_TYPE = -102,
    CFGFILE_NO_MANIFEST_URL = -103,
    CFGFILE_UNKNOWN_MANIFEST_KIND = -104,
    CFGFILE_UNKNOWN_MANIFEST_FORMAT = -105,

    MANIFEST_ERROR_PARSING_FILE = -200,
    MANIFEST_NO_LOCATIONS_DEFINED = -201,
    MANIFEST_UNKNOWN_ELEMENT = -202,
    MANIFEST_UNKNOWN_ATTRIBUTE = -203,
    MANIFEST_INCORRECT_ATTRIBUTE_VALUE = -204,
    MANIFEST_NO_DEFAULT_LOCATION = -205,
    MANIFEST_UNKNOWN_TYPE = -206,
    MANIFEST_UNKNOWN_KIND = -207,
    MANIFEST_LOCATION_WITHOUT_NAME = -208,
    MANIFEST_LOCATION_WITHOUT_ADDRESS = -209,
    MANIFEST_REPOSITORY_WITHOUT_NAME = -210,
    MANIFEST_REPOSITORY_WITHOUT_PATH = -211,
    MANIFEST_GROUP_WITHOUT_NAME = -212,
    MANIFEST_GROUP_REPO_WITHOUT_NAME = -213,
    MANIFEST_GROUP_REPO_WITHOUT_PATH = -214,
    MANIFEST_UNKNOWN_REPO = -215,
    MANIFEST_UNKNOWN_FILE_EXT = -216,
    MANIFEST_FAILED_TO_DETECT = -217,

    GREPO_FOLDER_NO_INCLUDE = -300,

    CMDINIT_NO_URL = -400,
    CMDINIT_FAILED_FETCH_UNKNOWN_MANIFEST = -401,

    GIT_GENERIC_ERROR = -500,
    GIT_UNKNOWN_PROTOCOL = -501,
    GIT_RAW_INT_ERROR = -502,
    GIT_ERROR_OPENING_REPO = -503,

    CMD_INCORRECT_PARAMETERS_IN_CONTEXT = -600,
    CMD_INCORRECT_PARAMETERS_COMBINATION = -601,
    CMD_MISSING_PARAMETERS = -602,
    CMD_GENERIC_RAW_ERROR = -603,
};
} // namespace esys::repo

namespace std
{

ESYSREPO_API ostream &operator<<(ostream &os, const esys::repo::ResultCode &result); //<swig_out/>
}
