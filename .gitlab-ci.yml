variables:
  TXT_E: "\e[31m"
  TXT_S: "\e[35m"
  TXT_W: "\e[33m"
  TXT_CLEAR: "\e[0m"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task

.unit_test: &unit_test
  script:
    - scripts/bootstrap.sh
    - scripts/build_ci.sh
    - if [ -z "${SKIP_CODE_COVERAGE}" ]; then scripts/run_code_coverage.sh; else scripts/run_unittests.sh; fi
    - if [ -z "${SKIP_CLANG_TIDY}" ]; then scripts/run_clang_tidy.sh; fi
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /WIP$/
      when: never
    - if: $CI_COMMIT_BRANCH == "master"
      when: never
  artifacts:
    paths:
      - public
    reports:
      junit:
        - build_dev/*_junit.txt
        - public/logs/*_junit.txt

.unit_test_sonar: &unit_test_sonar
  tags:
    - ubuntu20.04
  script:
    - scripts/install_sonarcloud.sh
    - scripts/bootstrap.sh
    - scripts/build_ci_merge.sh
    - cd build_dev/src/esysrepo
    - if [ -z "${SKIP_SONAR_CLOUD}" ]; then ../../../sonar-scanner/bin/sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.token="${SONAR_TOKEN}" -Dsonar.cfamily.compile-commands=../../build/cmake/compile_commands.json -X; fi
    - cd ../../..
    - scripts/valgrind_unittests.sh
    - if [ -z "${SKIP_CODE_COVERAGE}" ]; then scripts/run_code_coverage.sh; else scripts/run_unittests.sh; fi
    - if [ -z "${SKIP_CLANG_TIDY}" ]; then scripts/run_clang_tidy.sh; fi
  artifacts:
    paths:
      - public
      - build_dev/*_junit.txt
      - build_dev/valgrind-out.txt
    reports:
      junit: build_dev/*_junit.txt

unit_tests:ubuntu20_04:
  <<: *unit_test
  tags:
    - ubuntu20.04
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

unit_tests:ubuntu18_04:
  <<: *unit_test
  variables:
    SKIP_CODE_COVERAGE: "yes"
    SKIP_CLANG_TIDY: "yes"
    SKIP_PRE_COMMIT: "yes"
  tags:
    - ubuntu18.04
  rules:
    - when: always

unit_tests:ubuntu22_04:
  <<: *unit_test
  variables:
    SKIP_CODE_COVERAGE: "yes"
    SKIP_CLANG_TIDY: "yes"
  tags:
    - ubuntu22.04
  rules:
    - when: always

unit_tests:macos_big_sur:
  <<: *unit_test
  variables:
    SKIP_CODE_COVERAGE: "yes"
    SKIP_CLANG_TIDY: "yes"
  tags:
    - macos
  rules:
    - when: always

unit_tests:rasppi4:
  <<: *unit_test
  variables:
    SKIP_CODE_COVERAGE: "yes"
    SKIP_CLANG_TIDY: "yes"
  tags:
    - rasppi4
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# unit_tests:rasppi3:
#   <<: *unit_test
#   variables:
#     SKIP_CODE_COVERAGE: "yes"
#     SKIP_CLANG_TIDY: "yes"
#   tags:
#     - rasppi3
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

unit_test_sonar:
  <<: *unit_test_sonar
  only:
    - merge_requests
    - master

.webpage: &webpage
  tags:
    - ubuntu20.04
  script:
    - scripts/bootstrap.sh
    - scripts/build_webpage.sh
  artifacts:
    paths:
      - public

test_webpage:
  <<: *webpage
  except:
    - master

webpage:
  <<: *webpage
  only:
    - master

pages:
  <<: *unit_test_sonar
  variables:
    SKIP_SONAR_CLOUD: "yes"
  stage: deploy
  needs: ["webpage"]
  only:
    - master
