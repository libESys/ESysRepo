# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_esysrepo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_esysrepo')
    _esysrepo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_esysrepo', [dirname(__file__)])
        except ImportError:
            import _esysrepo
            return _esysrepo
        try:
            _mod = imp.load_module('_esysrepo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _esysrepo = swig_import_helper()
    del swig_import_helper
else:
    import _esysrepo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _esysrepo.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _esysrepo.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _esysrepo.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _esysrepo.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _esysrepo.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _esysrepo.SwigPyIterator_equal(self, x)

    def copy(self):
        return _esysrepo.SwigPyIterator_copy(self)

    def next(self):
        return _esysrepo.SwigPyIterator_next(self)

    def __next__(self):
        return _esysrepo.SwigPyIterator___next__(self)

    def previous(self):
        return _esysrepo.SwigPyIterator_previous(self)

    def advance(self, n):
        return _esysrepo.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _esysrepo.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _esysrepo.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _esysrepo.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _esysrepo.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _esysrepo.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _esysrepo.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _esysrepo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _esysrepo.SHARED_PTR_DISOWN
import esyslog
NOT_SET = _esysrepo.NOT_SET
LOCAL = _esysrepo.LOCAL
REMOTE = _esysrepo.REMOTE
ALL = _esysrepo.ALL
class Branch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Branch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Branch, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _esysrepo.new_Branch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _esysrepo.delete_Branch
    __del__ = lambda self: None

    def set_name(self, name):
        return _esysrepo.Branch_set_name(self, name)

    def get_name(self):
        return _esysrepo.Branch_get_name(self)

    def set_type(self, type):
        return _esysrepo.Branch_set_type(self, type)

    def get_type(self):
        return _esysrepo.Branch_get_type(self)

    def set_is_head(self, is_head):
        return _esysrepo.Branch_set_is_head(self, is_head)

    def get_is_head(self):
        return _esysrepo.Branch_get_is_head(self)
Branch_swigregister = _esysrepo.Branch_swigregister
Branch_swigregister(Branch)

class Commit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Commit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Commit, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _esysrepo.new_Commit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _esysrepo.delete_Commit
    __del__ = lambda self: None

    def set_hash(self, hash):
        return _esysrepo.Commit_set_hash(self, hash)

    def get_hash(self):
        return _esysrepo.Commit_get_hash(self)
Commit_swigregister = _esysrepo.Commit_swigregister
Commit_swigregister(Commit)

class Remote(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Remote, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Remote, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _esysrepo.new_Remote()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _esysrepo.delete_Remote
    __del__ = lambda self: None

    def set_name(self, name):
        return _esysrepo.Remote_set_name(self, name)

    def get_name(self):
        return _esysrepo.Remote_get_name(self)

    def set_url(self, url):
        return _esysrepo.Remote_set_url(self, url)

    def get_url(self):
        return _esysrepo.Remote_get_url(self)
Remote_swigregister = _esysrepo.Remote_swigregister
Remote_swigregister(Remote)

class GitBase(esyslog.User):
    __swig_setmethods__ = {}
    for _s in [esyslog.User]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GitBase, name, value)
    __swig_getmethods__ = {}
    for _s in [esyslog.User]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GitBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _esysrepo.delete_GitBase
    __del__ = lambda self: None

    def open(self, folder):
        return _esysrepo.GitBase_open(self, folder)

    def is_open(self):
        return _esysrepo.GitBase_is_open(self)

    def close(self):
        return _esysrepo.GitBase_close(self)

    def get_remotes(self, remotes):
        return _esysrepo.GitBase_get_remotes(self, remotes)

    def get_branches(self, *args):
        return _esysrepo.GitBase_get_branches(self, *args)

    def clone(self, url, path):
        return _esysrepo.GitBase_clone(self, url, path)

    def checkout(self, branch, force=False):
        return _esysrepo.GitBase_checkout(self, branch, force)

    def get_last_commit(self, commit):
        return _esysrepo.GitBase_get_last_commit(self, commit)

    def is_dirty(self, dirty):
        return _esysrepo.GitBase_is_dirty(self, dirty)
    if _newclass:
        is_repo = staticmethod(_esysrepo.GitBase_is_repo)
    else:
        is_repo = _esysrepo.GitBase_is_repo

    def set_id(self, id):
        return _esysrepo.GitBase_set_id(self, id)

    def get_id(self):
        return _esysrepo.GitBase_get_id(self)

    def set_debug(self, debug):
        return _esysrepo.GitBase_set_debug(self, debug)

    def get_debug(self):
        return _esysrepo.GitBase_get_debug(self)

    def get_version(self):
        return _esysrepo.GitBase_get_version(self)

    def get_lib_name(self):
        return _esysrepo.GitBase_get_lib_name(self)
GitBase_swigregister = _esysrepo.GitBase_swigregister
GitBase_swigregister(GitBase)

def GitBase_is_repo(path):
    return _esysrepo.GitBase_is_repo(path)
GitBase_is_repo = _esysrepo.GitBase_is_repo

class GitHelper(esyslog.User):
    __swig_setmethods__ = {}
    for _s in [esyslog.User]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GitHelper, name, value)
    __swig_getmethods__ = {}
    for _s in [esyslog.User]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GitHelper, name)
    __repr__ = _swig_repr

    def __init__(self, git=0, log_if=0, repo_idx=-1):
        this = _esysrepo.new_GitHelper(git, log_if, repo_idx)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _esysrepo.delete_GitHelper
    __del__ = lambda self: None

    def debug(self, level, msg):
        return _esysrepo.GitHelper_debug(self, level, msg)

    def info(self, msg):
        return _esysrepo.GitHelper_info(self, msg)

    def warn(self, msg):
        return _esysrepo.GitHelper_warn(self, msg)

    def critical(self, msg):
        return _esysrepo.GitHelper_critical(self, msg)

    def log(self, *args):
        return _esysrepo.GitHelper_log(self, *args)

    def error(self, *args):
        return _esysrepo.GitHelper_error(self, *args)

    def open(self, folder, log_level, debug_level=0):
        return _esysrepo.GitHelper_open(self, folder, log_level, debug_level)

    def clone(self, *args):
        return _esysrepo.GitHelper_clone(self, *args)

    def close(self, log_level, debug_level=0):
        return _esysrepo.GitHelper_close(self, log_level, debug_level)

    def get_branches(self, branches, branch_type, log_level, debug_level=0):
        return _esysrepo.GitHelper_get_branches(self, branches, branch_type, log_level, debug_level)
    if _newclass:
        sort_branches = staticmethod(_esysrepo.GitHelper_sort_branches)
    else:
        sort_branches = _esysrepo.GitHelper_sort_branches

    def is_dirty(self, dirty, log_level, debug_level=0):
        return _esysrepo.GitHelper_is_dirty(self, dirty, log_level, debug_level)

    def move(self, src, dst, recursive, log_level, debug_level=0):
        return _esysrepo.GitHelper_move(self, src, dst, recursive, log_level, debug_level)

    def set_git(self, git):
        return _esysrepo.GitHelper_set_git(self, git)

    def get_git(self):
        return _esysrepo.GitHelper_get_git(self)

    def set_repo_idx(self, repo_idx):
        return _esysrepo.GitHelper_set_repo_idx(self, repo_idx)

    def get_repo_idx(self):
        return _esysrepo.GitHelper_get_repo_idx(self)

    def init_oss(self, *args):
        return _esysrepo.GitHelper_init_oss(self, *args)
GitHelper_swigregister = _esysrepo.GitHelper_swigregister
GitHelper_swigregister(GitHelper)

def GitHelper_sort_branches(branches):
    return _esysrepo.GitHelper_sort_branches(branches)
GitHelper_sort_branches = _esysrepo.GitHelper_sort_branches

ESYSREPO_USE_LIBGIT2 = _esysrepo.ESYSREPO_USE_LIBGIT2
class Git(GitBase):
    __swig_setmethods__ = {}
    for _s in [GitBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Git, name, value)
    __swig_getmethods__ = {}
    for _s in [GitBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Git, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _esysrepo.new_Git()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _esysrepo.delete_Git
    __del__ = lambda self: None

    def open(self, folder):
        return _esysrepo.Git_open(self, folder)

    def is_open(self):
        return _esysrepo.Git_is_open(self)

    def close(self):
        return _esysrepo.Git_close(self)

    def get_remotes(self, remotes):
        return _esysrepo.Git_get_remotes(self, remotes)

    def get_branches(self, *args):
        return _esysrepo.Git_get_branches(self, *args)

    def clone(self, url, path):
        return _esysrepo.Git_clone(self, url, path)

    def checkout(self, branch, force=False):
        return _esysrepo.Git_checkout(self, branch, force)

    def get_last_commit(self, commit):
        return _esysrepo.Git_get_last_commit(self, commit)

    def is_dirty(self, dirty):
        return _esysrepo.Git_is_dirty(self, dirty)

    def get_version(self):
        return _esysrepo.Git_get_version(self)

    def get_lib_name(self):
        return _esysrepo.Git_get_lib_name(self)
    if _newclass:
        s_get_version = staticmethod(_esysrepo.Git_s_get_version)
    else:
        s_get_version = _esysrepo.Git_s_get_version
    if _newclass:
        s_get_lib_name = staticmethod(_esysrepo.Git_s_get_lib_name)
    else:
        s_get_lib_name = _esysrepo.Git_s_get_lib_name
    if _newclass:
        s_get_ssh_version = staticmethod(_esysrepo.Git_s_get_ssh_version)
    else:
        s_get_ssh_version = _esysrepo.Git_s_get_ssh_version
    if _newclass:
        s_get_ssh_lib_name = staticmethod(_esysrepo.Git_s_get_ssh_lib_name)
    else:
        s_get_ssh_lib_name = _esysrepo.Git_s_get_ssh_lib_name

    def get_impl(self):
        return _esysrepo.Git_get_impl(self)
Git_swigregister = _esysrepo.Git_swigregister
Git_swigregister(Git)

def Git_s_get_version():
    return _esysrepo.Git_s_get_version()
Git_s_get_version = _esysrepo.Git_s_get_version

def Git_s_get_lib_name():
    return _esysrepo.Git_s_get_lib_name()
Git_s_get_lib_name = _esysrepo.Git_s_get_lib_name

def Git_s_get_ssh_version():
    return _esysrepo.Git_s_get_ssh_version()
Git_s_get_ssh_version = _esysrepo.Git_s_get_ssh_version

def Git_s_get_ssh_lib_name():
    return _esysrepo.Git_s_get_ssh_lib_name()
Git_s_get_ssh_lib_name = _esysrepo.Git_s_get_ssh_lib_name

# This file is compatible with both classic and new-style classes.


